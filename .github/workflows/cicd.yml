name: CICD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version-file: '.python-version'

      - name: Cache packages
        id: python-packages-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ github.job }}-packages-${{ hashFiles(format('{0}/{1}', github.workspace, 'requirements.lock')) }}-${{ hashFiles(format('{0}/{1}', github.workspace, 'requirements-dev.lock')) }}

      - name: Install dependencies
        run: pip install -r requirements.lock -r requirements-dev.lock
        if: steps.python-packages-cache.outputs.cache-hit != 'true'

      - name: Lint
        run: flake8 src

      - name: Test
        run: pytest

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: htmlcov/

  cd:
    runs-on: ubuntu-22.04
    needs: ci
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Install dependencies
        run: |
          cd cdk/
          npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cache packages
        id: python-lib-cache
        uses: actions/cache@v3
        with:
          path: ./lib
          key: ${{ runner.os }}-${{ github.job }}-lib-${{ hashFiles(format('{0}/{1}', github.workspace, 'requirements.lock')) }}

      - name: Install dependencies
        run: |
          sh download-dependencies.sh
        if: steps.python-lib-cache.outputs.cache-hit != 'true'

      - name: Build and Deploy
        run: |
          cd cdk/
          cdk deploy
        env:
          NOTION_SECRET_KEY: ${{ secrets.NOTION_SECRET_KEY }}
          NOTION_USER_EMAIL: ${{ secrets.NOTION_USER_EMAIL }}
